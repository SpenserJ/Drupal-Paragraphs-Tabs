<?php

/**
 * Invokes hook_preprocess_node to mimic field_group rendering process
 * @param $vars the node rendering variables
 */
function paragraphs_tabs_preprocess_node(&$vars) {

  $el = &$vars['elements'];
  $tab_paragraph_field = '';

  // Get the element children.
  $children = element_children($el);
  // Check every element child for a paragraphs field.
  foreach ($children as $child_name) {
    $child = $el[$child_name];

    // reference the correct array key
    if (empty($child['#field_type']) || ($child['#field_type'] !== 'paragraphs')) { continue; }

    $is_tabbed_paragraph = FALSE;

    // If a paragraphs field is found, check the elements inside it for
    // the tab name field.
    $field_items = element_children($child);
    foreach ($field_items as $item_name) {
      $item = $child[$item_name];

      // Get the item entity.
      $paragraph = array_shift($item['entity']['paragraphs_item']);
      if (empty($paragraph['paragraphs_tabs_name']) === FALSE) {
        // If a field is found, set the htab build flag
        // and keep paragraph tab field name
        $is_tabbed_paragraph = TRUE;
        $tab_paragraph_field = $child_name;
        break;
      }
    }

    if ($is_tabbed_paragraph === TRUE) {
      // make the htab container on the node
      $el['#groups']['group_tab_content'] = (object) array(
        'weight' => 2,
        'label' => 'Tab',
        'group_name' => 'group_tab_content',
        'parent_name' => NULL,
        'format_type' => 'htabs',
        'children' => NULL,
      );

      // add fieldgroup key
      $el['#fieldgroups']['group_tab_content'] = &$el['#groups']['group_tab_content'];

      // use this template to build paragraphs as htabs
      $htab_template = array(
        'weight' => $el['#groups']['group_tab_content']->weight,
        'label' => '',
        'collapsible' => FALSE,
        'collapsed' => FALSE,
        'group_name' => '',
        'parent_name' => 'group_tab_content',
        'format_type' => 'htab',
        'children' => NULL,
      );

      // accordion group template
      $el['#groups']['group_accordion_content'] = (object) array(
        'weight' => 3,
        'label' => 'Accordion',
        'group_name' => 'group_accordion_content',
        'parent_name' => NULL,
        'format_type' => 'accordion',
        'format_settings' => array(
          'formatter' => '',
          'instance_settings' => array(
            'description' => '',
            'classes' => 'field-group-accordion',
            'effect' => 'bounceslide',
          ),
        ),
        'children' => array(''),
      );

      // add fieldgroup key
      $el['#fieldgroups']['group_accordion_content'] = &$el['#groups']['group_accordion_content'];
      
      // use this template to build paragraphs as accordion_items
      $accordion_template = array(
        'weight' => $el['#groups']['group_accordion_content']->weight,
        'label' => '',
        'collapsed' => TRUE,
        'group_name' => '',
        'parent_name' => 'group_accordion_content',
        'format_type' => 'accordion_item',
        'children' => array(''),
      );

      // make an htab for every paragraph
      $tab_paragraphs = element_children($el[$tab_paragraph_field]);
      foreach($tab_paragraphs as $paragraph_index) {
        $paragraph = $el[$tab_paragraph_field][$paragraph_index];

        // take the entity out
        $paragraph_entity = array_shift($paragraph['entity']['paragraphs_item']);

        // process the entity into groups
        if(isset($paragraph_entity['paragraphs_tabs_name']['#items'][0]['value']) === TRUE) {
          $item_label = $paragraph_entity['paragraphs_tabs_name']['#items'][0]['value'];
          unset($paragraph_entity['paragraphs_tabs_name']);
        } else {
          $item_label = 'Tab ' . $paragraph_index;
        }
        $htab_template['label'] = $accordion_template['label'] = $item_label;

        // put the entity in the top level of the renderable
        $el['paragraphs_tab_' . $paragraph_index]  = $el['paragraphs_accordion_' . $paragraph_index] = $paragraph_entity;

        // add the correct group name and children array
        $htab_template['group_name'] = 'group_tab_item_' . $paragraph_index;
        $htab_template['children'] = array('paragraphs_tab_' . $paragraph_index);
        $accordion_template['group_name'] = 'group_accordion_item_' . $paragraph_index;
        $accordion_template['children'] = array('paragraphs_accordion_' . $paragraph_index);

        // add group to renderable as an object
        $el['#groups']['group_tab_item_' . $paragraph_index] = (object) $htab_template;
        $el['#groups']['group_tab_item_' . $paragraph_index]->weight = $paragraph_index;
        $el['#groups']['group_accordion_item_' . $paragraph_index] = (object) $accordion_template;
        $el['#groups']['group_accordion_item_' . $paragraph_index]->weight = $paragraph_index;

        // set the fieldgroup paragraph_index and group child mapping
        $el['#fieldgroups']['group_tab_item_' . $paragraph_index] = &$el['#groups']['group_tab_item_' . $paragraph_index];
        $el['#fieldgroups']['group_accordion_item_' . $paragraph_index] = &$el['#groups']['group_accordion_item_' . $paragraph_index];
        $el['#group_children']['paragraphs_tab_' . $paragraph_index] = 'group_tab_item_' . $paragraph_index;
        $el['#group_children']['paragraphs_accordion_' . $paragraph_index] = 'group_accordion_item_' . $paragraph_index;
        $el['#group_children']['group_tab_item_' . $paragraph_index] = 'group_tab_content';
        $el['#group_children']['group_accordion_item_' . $paragraph_index] = 'group_accordion_content';

        // update children of htab container
        $el['#groups']['group_tab_content']->children[] = 'group_tab_item_' . $paragraph_index;
        $el['#groups']['group_accordion_content']->children[] = 'group_accordion_item_' . $paragraph_index;
      }
      uasort($el['#groups']['group_tab_content']->children, 'element_sort');
      uasort($el['#groups']['group_accordion_content']->children, 'element_sort');

      // now unset the paragraphs from content
      unset($vars['content'][$tab_paragraph_field]);
    }
  }
}

/**
 * Update relevant paragraphs bundles to use the name field
 * @param $bundles an array of paragraph bundle names that require name field
 */
function paragraphs_tabs_configure_bundles($bundles) {
  // get bundles already using the field
  $current_field = field_info_field('paragraphs_tabs_name');
  $old_bundles = isset($current_field['bundles']['paragraphs_item']) ? $current_field['bundles']['paragraphs_item'] : array();

  // remove old instances
  foreach($old_bundles as $bundle) {
    // anything in the old and not the new is removed
    if(in_array($bundle, $bundles) === FALSE) {
      // get the old instance
      $instance = field_info_instance('paragraphs_item', 'paragraphs_tabs_name', $bundle);
      // second argument FALSE so field doesnt get removed from system
      field_delete_instance($instance, FALSE);
    }
  }

  // add new instances
  foreach($bundles as $bundle) {
    // anything in the new bundles not in the old was added
    if(in_array($bundle, $old_bundles) === FALSE) {
      $instance = array(
        'field_name' => 'paragraphs_tabs_name',
        'entity_type' => 'paragraphs_item',
        'bundle' => $bundle,
        'label' => t('Tab Name'),
        'required' => TRUE,
      );
      field_create_instance($instance);
    }
  }
}
